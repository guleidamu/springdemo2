package com.thinkInJava.book.MS.Main.CodeBlock;

/**
 * 类加载序列的优先顺序
 * 代码块加载顺序高于构造
 * 构造代码块在每次创建对象时都会被调用，并且构造代码块的执行次序优先于类的构造函数
 */

/**
 * 构造块：直接在类中定义且没有加static关键字的代码块称为{}构造代码块。构造代码块在创建对象时被调用，
 * 每次创建对象都会被调用，并且构造代码块的执行次序优先于类构造函数。
 */
/**
 * 构造代码块运行在静态代码块之后，构造函数之前，主要用于对象实例数据的初始化问题，
 * 需要注意的是与构造函数不同的是，对于每次调用不同构造函数都会使用构造代码块，但是对于不同的构造函数，
 * 构造函数初始化的实例数据不同的。
 *
 */

/**
 * 静态代码块使用static关键字进行修饰,运行在类初始化阶段(这点不清楚的同学需要恶补JVM知识哈)，
 * 静态代码块只运行一次，主要用于类变量的初始化和赋值。静态代码块的金典用法是读取配置文件
 */


public class CodeBlock02 {
    {
        //普通代码块
        System.out.println("第二构造块333");
    }
    public CodeBlock02(){
        System.out.println("构造方法222");
    }
    static {
        System.out.println("静态代码块");
    }
    {
        System.out.println("第一代码块111");
    }
    public void hs(){
        System.out.println("hs()方法");
    }

    public static void main(String[] args) {
        CodeBlock02 codeBlock02 = new CodeBlock02();
        System.out.println("还未调用方法=======");
        codeBlock02.hs();
        System.out.println("=======");
        new CodeBlock02();
    }

    /**
     * 静态代码块:
     *     1.使用static关键字修饰，是在类初始化阶段运行静态代码块
     *     2.静态代码块一般用于只需要加载一次的场景下，比如读取配置文件
     *     3.静态代码块主要类调用
     * 构造函数:
     *     1.构造出对象时才会调用构造函数
     *     2.构造函数建立对象时只是运行一次，不过可以多次调用该方法获取不同实例对象
     *     3.不同的构造函数可能初始化不同的实例数据部分
     * 构造代码块:
     *     1.运行于静态代码块之后，构造函数之前
     *     2.不同的构造函数可能初始化的实例数据部分不一样，但是都会运行构造代码块
     *     3.主要用于初始化对象
     */
}
